generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  username String @unique
  password String
  tokens   Int    @default(100)

  bets     Bet[]
  wonSpins RouletteSession[] @relation("SpinWinners")

  battleBets    BattleBet[] @relation("BattleParticipants")
  wonBattleBets BattleBet[] @relation("BattleBetWinner")

  createdAt DateTime @default(now())
}

model Bet {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  session   RouletteSession @relation(fields: [sessionId], references: [id])
  sessionId String

  choice RouletteColor
  amount Int

  createdAt DateTime @default(now())
}

model RouletteSession {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime

  result     Int?
  isComplete Boolean @default(false)

  bets    Bet[]
  winners User[] @relation("SpinWinners")

  createdAt DateTime @default(now())
}

enum RouletteColor {
  RED
  BLACK
  GREEN
}

enum BattleBetStatus {
  WAITING
  IN_PROGRESS
  DONE
  FINISHED
}

model BattleBet {
  id        String   @id @default(cuid())
  amount    Float
  status    BattleBetStatus @default(WAITING)
  createdAt DateTime @default(now())
  progressionStep Int       @default(0)

  participants User[]  @relation("BattleParticipants")
  winner       User?   @relation("BattleBetWinner", fields: [winnerId], references: [id])
  winnerId     String?

  participantEntries Participant[]
}

model Participant {
  id       Int       @id @default(autoincrement())
  username String
  battleId String
  battle   BattleBet @relation(fields: [battleId], references: [id])
}
